#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2

# source in common functions
. $BIN_DIR/common.sh

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

GRAILS_DIR=".grails"
GRAILS_CMD="grails"

check_build_status()
{
  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to build app"
    exit 1
  fi
}

install_grails()
{
  VER_TO_INSTALL=$1
  GRAILS_URL="http://s3.amazonaws.com/heroku-jvm-buildpack-grails/grails-$VER_TO_INSTALL.tar.gz"

  GRAILS_TAR_FILE="grails-heroku.tar.gz"
  echo "-----> Installing Grails $VER_TO_INSTALL....."
  curl --silent --max-time 150 --location $GRAILS_URL -o $GRAILS_TAR_FILE

  # Error checking
  if [ ! -f $GRAILS_TAR_FILE ]; then
    echo "-----> Error downloading Grails framework. Please try again..."
    exit 1
  fi
  if [ -z "`file $GRAILS_TAR_FILE | grep gzip`" ]; then
    echo "-----> Error installing Grails framework or unsupported Grails framework version specified. Please review Dev Center for a list of supported versions."
    exit 1
  fi

  tar xzf $GRAILS_TAR_FILE
  rm $GRAILS_TAR_FILE

  echo "-----> Done"
}

if [ ! -f $BUILD_DIR/application.properties ] ; then
    echo "-----> File not found: application.properties. This file is required. Build failed."
    echo " !     Failed to build app"
    exit 1
fi
    
GRAILS_VERSION=$(get_property $BUILD_DIR/application.properties 'app.grails.version')

echo "-----> Grails $GRAILS_VERSION app detected"
echo "       WARNING: The Grails buildpack is currently in Beta."

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

# install JDK
if [ -f ${BUILD_DIR}/system.properties ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java download_jdk"
  LOGGER_FLAGS="$LOGGER_FLAGS download_jdk"
  javaVersion=$(detect_java_version ${BUILD_DIR})
  echo -n "-----> Installing OpenJDK ${javaVersion}..."
  install_java ${BUILD_DIR} ${javaVersion}
  jdk_overlay ${BUILD_DIR}
  echo "done"
  cp ${BUILD_DIR}/system.properties ${CACHE_DIR}/
fi

cd $CACHE_DIR

if [ -f $BUILD_DIR/grailsw ] ; then
    GRAILS_CMD="./grailsw"
else
  # install grails
  if [ ! -d $GRAILS_DIR ]; then
    install_grails $GRAILS_VERSION
  else
    INSTALLED_GRAILS_VERSION=$(get_property $GRAILS_DIR/build.properties 'grails.version')
    if [ "$INSTALLED_GRAILS_VERSION" != "$GRAILS_VERSION" ] ; then
      echo "-----> Updating Grails version. Previous version was $INSTALLED_GRAILS_VERSION. Updating to $GRAILS_VERSION..."
      rm -rf $GRAILS_DIR
      install_grails $GRAILS_VERSION
    fi
  fi
fi

# This is a simplisitic way to only set JAVA_HOME when on Cedar. If you run this 
# script locally and your jdk is not in this location, you're responsible for
# setting it yourself. Need to find a smarter way of conditionally setting this var
if [ -d /usr/lib/jvm/java-6-openjdk ] ; then
    export JAVA_HOME=/usr/lib/jvm/java-6-openjdk
fi
export GRAILS_HOME=$CACHE_DIR/$GRAILS_DIR
export PATH=$GRAILS_HOME/bin:$PATH

cd $BUILD_DIR

# if grails cache directory doesn't exist create it
if [ ! -d $CACHE_DIR/.grails_cache ]; then
  mkdir $CACHE_DIR/.grails_cache
fi

# Cache priming option
# if a populated cache was checked in copy it into the cache
# remove the checked in cache dir aftewards to save slug size
if [ -d ivy-cache ]; then
  echo "-----> Found ivy-cache directory in the repo. Using it to prime the cache"
  cp -r ivy-cache $CACHE_DIR/.grails_cache/
  rm -r ivy-cache
fi

# create .grails directory in the user home and write a settings.groovy that points grails
# at the correct cache directory
if [ ! -d $HOME/.grails ]; then
  mkdir $HOME/.grails
fi

echo "grails.dependency.cache.dir = '$CACHE_DIR/.grails_cache'" >> $HOME/.grails/settings.groovy

# build app
if [ "$GRAILS_VERSION" != "1.3.7" ] ; then
    BUILDCMD_OPT="-plain-output"
fi

COMPILECMD="$GRAILS_CMD -Divy.default.ivy.user.dir=$CACHE_DIR compile --non-interactive"
echo "-----> Executing $COMPILECMD"
eval "$COMPILECMD" | sed -u 's/^/       /'
check_build_status

BUILDCMD="$GRAILS_CMD $BUILDCMD_OPT -Divy.default.ivy.user.dir=$CACHE_DIR war --non-interactive"
echo "-----> Executing $BUILDCMD"
eval "$BUILDCMD" | sed -u 's/^/       /'
check_build_status

if [ ! -d server ] ; then
    JETTY_RUNNER_VERSION=7.5.4.v20111024

    echo "-----> No server directory found. Adding jetty-runner $JETTY_RUNNER_VERSION automatically."
    mkdir server
    cp $GRAILS_HOME/jetty-runner-$JETTY_RUNNER_VERSION.jar server/jetty-runner.jar
    echo "vendored:$JETTY_RUNNER_VERSION" > server/jettyVersion
    echo "vendored:$JETTY_RUNNER_VERSION" > $CACHE_DIR/jettyVersion
fi


